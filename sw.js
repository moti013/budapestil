const staticCacheName = 'static-v40'; const dynamicCacheName = 'dynamic-v40'; const assets = ['/', '/index.html', '/assets/js/app.js', '/fallback.html']; const limitCacheSize = (name, size) => { caches.open(name).then(cache => { cache.keys().then(keys => { if (keys.length > size) { cache.delete(keys[0]).then(limitCacheSize(name, size)) } }) }) }; self.addEventListener('install', evt => { evt.waitUntil(caches.open(staticCacheName).then((cache) => { console.log('caching shell assets'); cache.addAll(assets) })) }); self.addEventListener('activate', evt => { evt.waitUntil(caches.keys().then(keys => { return Promise.all(keys.filter(key => key !== staticCacheName && key !== dynamicCacheName).map(key => caches.delete(key))) })) }); self.addEventListener('fetch', evt => { evt.respondWith(caches.match(evt.request).then(cacheRes => { return cacheRes || fetch(evt.request).then(fetchRes => { return caches.open(dynamicCacheName).then(cache => { cache.put(evt.request.url, fetchRes.clone()); limitCacheSize(dynamicCacheName, 70); return fetchRes }) }) }).catch(() => { if (evt.request.url.indexOf('.html') > -1) { return caches.match('/fallback.html') } })) })
caches.keys().then(function (names) {
    for (let name of names)
        caches.delete(name);
});